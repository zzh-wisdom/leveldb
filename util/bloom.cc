// Copyright (c) 2012 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#include "leveldb/filter_policy.h"

#include "leveldb/slice.h"
#include "util/hash.h"

namespace leveldb {

namespace {
static uint32_t BloomHash(const Slice& key) {
  return Hash(key.data(), key.size(), 0xbc9f1d34);
}

/**
 * @brief 
 * 
 * Leveldb使用了double hashing来模拟多个hash函数。
 * 和线性再探测（linearprobing）一样，Double hashing从一个hash值开始，重复向前迭代。
 * 
 * 给定两个独立的hash函数h1和h2，对于hash表T和值k，第i次迭代计算出的位置就是：h(i, k) = (h1(k) + i*h2(k)) mod |T|。
 * 
 * 对此，Leveldb选择的hash函数是：
 * - Gi(x)=H1(x)+iH2(x)
 * - H2(x)=(H1(x)>>17) | (H1(x)<<15)
 * H1是一个基本的hash函数，H2是由H1循环右移得到的，Gi(x)就是第i次迭代得到的hash值（即加上i倍的H2(x)）。
 * 【理论分析可参考论文Kirsch,Mitzenmacher2006】
 * 
 * k_实际上就是G(x)的个数，也就是计算时采用的hash函数个数。
 * 
 */
class BloomFilterPolicy : public FilterPolicy {
 public:
  explicit BloomFilterPolicy(int bits_per_key) : bits_per_key_(bits_per_key) {
    // We intentionally round down to reduce probing cost a little bit
    // 降低探测成本
    k_ = static_cast<size_t>(bits_per_key * 0.69);  // 0.69 =~ ln(2)
    if (k_ < 1) k_ = 1;
    if (k_ > 30) k_ = 30;
  }

  const char* Name() const override { return "leveldb.BuiltinBloomFilter2"; }

  /**
   * @brief Create a Filter object
   * 
   * @param keys 
   * @param n 
   * @param dst 
   */
  void CreateFilter(const Slice* keys, int n, std::string* dst) const override {
    // Compute bloom filter size (in both bits and bytes)
    size_t bits = n * bits_per_key_;

    // For small n, we can see a very high false positive rate.  Fix it
    // by enforcing a minimum bloom filter length.
    if (bits < 64) bits = 64;

    size_t bytes = (bits + 7) / 8; // 向上取整到byte
    bits = bytes * 8;

    const size_t init_size = dst->size();
    dst->resize(init_size + bytes, 0);
    dst->push_back(static_cast<char>(k_));  // Remember # of probes in filter 记录过滤器使用的探针数，放到bloom filter数据的最后
    char* array = &(*dst)[init_size];
    for (int i = 0; i < n; i++) {
      // Use double-hashing to generate a sequence of hash values.
      // See analysis in [Kirsch,Mitzenmacher 2006].
      uint32_t h = BloomHash(keys[i]);
      const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
      for (size_t j = 0; j < k_; j++) {
        const uint32_t bitpos = h % bits;
        array[bitpos / 8] |= (1 << (bitpos % 8));
        h += delta;
      }
    }
  }

  /**
   * @brief 根据Bloom Filter查找Key
   * 
   * @param key 
   * @param bloom_filter 
   * @return true 
   * @return false 
   */
  bool KeyMayMatch(const Slice& key, const Slice& bloom_filter) const override {
    const size_t len = bloom_filter.size();
    if (len < 2) return false;

    const char* array = bloom_filter.data();
    const size_t bits = (len - 1) * 8; // 减一是因为又一个字节用于存储k_

    // Use the encoded k so that we can read filters generated by
    // bloom filters created using different parameters.
    const size_t k = array[len - 1];
    if (k > 30) {
      // Reserved for potentially new encodings for short bloom filters.
      // Consider it a match.
      // 参数k_大于30的情况，默认视为匹配
      return true;
    }

    uint32_t h = BloomHash(key);
    const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
    for (size_t j = 0; j < k; j++) {
      const uint32_t bitpos = h % bits;
      if ((array[bitpos / 8] & (1 << (bitpos % 8))) == 0) return false;
      h += delta;
    }
    return true;
  }

 private:
  size_t bits_per_key_;
  size_t k_;   // 对bits_per_key_处理后得到的每个key所占的bit数
};
}  // namespace

/**
 * @brief 新建一个Bloom Filter
 * 
 * @param bits_per_key  每个key设置的bit个数
 * @return const FilterPolicy* 
 */
const FilterPolicy* NewBloomFilterPolicy(int bits_per_key) {
  return new BloomFilterPolicy(bits_per_key);
}

}  // namespace leveldb
